
const {
    default: makeWASocket,
    useMultiFileAuthState,
    DisconnectReason,          // ‚Üê add this
} = require('@whiskeysockets/baileys');
const P = require('pino');
const qrcode = require('qrcode');
let latestQR = null;

let client;

const initWhatsApp = async () => {
    const { state, saveCreds } = await useMultiFileAuthState('./auth');

    client = makeWASocket({
        auth: state,
        logger: P({ level: 'silent' }),
    });

    client.ev.on('connection.update', ({ connection, lastDisconnect , qr}) => {

        if (qr) {
            latestQR = qr;
            //qrcode.generate(qr, { small: true });
            console.log('üì∑ QR-–∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n');
        }

        if (connection === 'close') {
            const shouldReconnect = lastDisconnect.error?.output?.statusCode
                !== DisconnectReason.loggedOut;
            console.log('‚ùå WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω', lastDisconnect.error,
                shouldReconnect ? '‚Äî –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è' : '');
            if (shouldReconnect) initWhatsApp();
        } else if (connection === 'open') {
            console.log('‚úÖ WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω');
            // ‚úÖ –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendMessage('+996507391773', 'üëã –ü—Ä–∏–≤–µ—Ç! WhatsApp –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!');
        }
    });

    client.ev.on('creds.update', saveCreds);
};

const sendMessage = async (phone, message) => {
    if (!client || !client.user?.id) {
        throw new Error('WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }

    const number = phone.replace(/[^0-9]/g, '') + '@s.whatsapp.net';
    try {
        await client.sendMessage(number, {text: message});
        console.log(`üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${phone}`);
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
    }

};


module.exports = {
    initWhatsApp,
    sendMessage: async (phone, text) => {
        await client.sendMessage(phone, { text });
    },
    getClient: () => client,   // –æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
    getQR:      () => latestQR, // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É QR
    client                        // —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–æ–∫–µ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é
};
