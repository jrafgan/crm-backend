const Schedule = require('../models/Schedule');
const Student = require('../models/Student');

// ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
exports.createSchedule = async (req, res) => {
    try {
        const { teacherId, weekStart, slots } = req.body;

        if (!slots || !Array.isArray(slots) || slots.length === 0) {
            return res.status(400).json({ error: '–°–ª–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
        }

        const schedule = new Schedule({ teacherId, weekStart, slots });
        await schedule.save();

        res.status(201).json(schedule);
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', details: err.message });
    }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)
exports.getAllSchedules = async (req, res) => {
    try {
        const schedules = await Schedule.find()
            .populate('teacherId', 'fullName')
            .populate('slots.studentId', 'fullName packageType');

        res.json(schedules);
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', details: err.message });
    }
};


// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
exports.getSchedules = async (req, res) => {
    try {
        const filter = {};
        const { teacherId, weekStart } = req.query;

        if (teacherId) filter.teacherId = teacherId;
        if (weekStart) filter.weekStart = new Date(weekStart);

        const schedules = await Schedule.find(filter)
            .populate('teacherId', 'fullName')
            .populate('slots.studentId', 'fullName packageType');

        res.json(schedules);
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π', details: err.message });
    }
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
exports.getScheduleById = async (req, res) => {
    try {
        const schedule = await Schedule.findById(req.params.id)
            .populate('teacherId', 'fullName')
            .populate('slots.studentId', 'fullName packageType');

        if (!schedule) return res.status(404).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });

        res.json(schedule);
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', details: err.message });
    }
};

// ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
exports.updateSchedule = async (req, res) => {
    try {
        const schedule = await Schedule.findById(req.params.id);
        if (!schedule) return res.status(404).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });

        const { weekStart, slots } = req.body;

        if (weekStart) schedule.weekStart = new Date(weekStart);
        if (slots && Array.isArray(slots)) schedule.slots = slots;

        await schedule.save();
        res.json(schedule);
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', details: err.message });
    }
};

// ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
exports.deleteSchedule = async (req, res) => {
    try {
        const schedule = await Schedule.findById(req.params.id);
        if (!schedule) return res.status(404).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });

        await schedule.remove();
        res.json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', details: err.message });
    }
};

// üìå –û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
exports.updateSlot = async (req, res) => {
    try {
        const { scheduleId, slotIndex } = req.params;
        const updateData = req.body;

        const schedule = await Schedule.findById(scheduleId);
        if (!schedule || !schedule.slots[slotIndex]) {
            return res.status(404).json({ error: '–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç
        Object.assign(schedule.slots[slotIndex], updateData);
        await schedule.save();

        res.json({ message: '–°–ª–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', slot: schedule.slots[slotIndex] });
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞', details: err.message });
    }
};

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
exports.addSlot = async (req, res) => {
    try {
        const schedule = await Schedule.findById(req.params.id);
        if (!schedule) return res.status(404).json({ error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });

        schedule.slots.push(req.body);
        await schedule.save();

        res.json({ message: '–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω', slots: schedule.slots });
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞', details: err.message });
    }
};


// üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É
exports.deleteSlot = async (req, res) => {
    try {
        const { scheduleId, slotIndex } = req.params;

        const schedule = await Schedule.findById(scheduleId);
        if (!schedule || !schedule.slots[slotIndex]) {
            return res.status(404).json({ error: '–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        schedule.slots.splice(slotIndex, 1); // –£–¥–∞–ª–µ–Ω–∏–µ
        await schedule.save();

        res.json({ message: '–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω' });
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞', details: err.message });
    }
};

exports.copyScheduleToNextWeek = async (req, res) => {
    try {
        const sourceSchedule = await Schedule.findById(req.params.id);
        if (!sourceSchedule) {
            return res.status(404).json({ error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
        }

        // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
        const newWeekStart = new Date(sourceSchedule.weekStart);
        newWeekStart.setDate(newWeekStart.getDate() + 7);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç—É –Ω–µ–¥–µ–ª—é
        const existing = await Schedule.findOne({
            teacherId: sourceSchedule.teacherId,
            weekStart: newWeekStart
        });
        if (existing) {
            return res.status(400).json({ error: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        // –ö–æ–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
        const newSchedule = new Schedule({
            teacherId: sourceSchedule.teacherId,
            weekStart: newWeekStart,
            slots: sourceSchedule.slots.map(slot => ({ ...slot.toObject() })) // –≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è
        });

        await newSchedule.save();

        res.status(201).json({ message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ', schedule: newSchedule });
    } catch (err) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', details: err.message });
    }
};

